{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/print.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport isnan from '@stdlib/assert-is-nan';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.p] - probability under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'p' ) ) {\n\t\topts.p = options.p;\n\t\tif ( !isNumber( opts.p ) || isnan( opts.p ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'p', opts.p ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport roundn from '@stdlib/math-base-special-roundn';\nimport format from '@stdlib/string-format';\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nexport default print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property';\nimport isNumberArray from '@stdlib/assert-is-number-array';\nimport isNonNegativeInteger from '@stdlib/assert-is-nonnegative-integer';\nimport betaQuantile from '@stdlib/stats-base-dists-beta-quantile';\nimport floor from '@stdlib/math-base-special-floor';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport binomialCDF from '@stdlib/stats-base-dists-binomial-cdf';\nimport binomialPMF from '@stdlib/stats-base-dists-binomial-pmf';\nimport format from '@stdlib/string-format';\nimport validate from './validate.js';\nimport print from './print.js'; // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar RELATIVE_ERROR = 1+1e-07;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the lower endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} lower endpoint\n*/\nfunction lower( x, n, alpha ) {\n\treturn ( x === 0 ) ? 0 : betaQuantile( alpha, x, n - x + 1 );\n}\n\n/**\n* Calculates the upper endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} upper endpoint\n*/\nfunction upper( x, n, alpha ) {\n\treturn ( x === n ) ? 1 : betaQuantile( 1 - alpha, x + 1, n - x );\n}\n\n\n// MAIN //\n\n/**\n* Computes an exact test for the success probability in a Bernoulli experiment.\n*\n* @param {(NonNegativeInteger|Array)} x - number of successes or two-element array with successes and failures\n* @param {NonNegativeInteger} [n] - total number of observations\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {Probability} [options.p=0.5] - success probability under H0\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @returns {Object} test results\n*/\nfunction binomialTest() {\n\tvar alpha;\n\tvar opts;\n\tvar cint;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar d;\n\tvar m;\n\tvar n;\n\tvar p;\n\tvar x;\n\tvar y;\n\tvar i;\n\n\topts = {};\n\tif ( isNumberArray( arguments[ 0 ] ) ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== 2 ) {\n\t\t\tthrow new Error( format( 'invalid argument. An array argument must contain two elements. Value: `%s`.', x ) );\n\t\t}\n\t\tn = x[ 1 ] + x[ 0 ];\n\t\tx = x[ 0 ];\n\t\tif ( arguments[ 1 ] ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t}\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\tn = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer or a two-element array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', n ) );\n\t\t}\n\t\tif ( x > n ) {\n\t\t\tthrow new TypeError( format( 'invalid arguments. Number of successes cannot be larger than the total number of observations. x: `%u`. n: `%u`.' ) );\n\t\t}\n\t\tif ( arguments[ 2 ] ) {\n\t\t\terr = validate( opts, arguments[ 2 ] );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\tif ( opts.p === void 0 ) {\n\t\tp = 0.5;\n\t} else {\n\t\tp = opts.p;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a probability. Option: `%f`.', 'p', p ) );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tstat = x / n;\n\tswitch ( alt ) {\n\tcase 'less':\n\t\tpval = binomialCDF( x, n, p );\n\t\tcint = [ 0.0, upper( x, n, alpha ) ];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - binomialCDF( x - 1, n, p );\n\t\tcint = [ lower( x, n, alpha ), 1.0 ];\n\t\tbreak;\n\tcase 'two-sided':\n\t\td = binomialPMF( x, n, p );\n\t\tm = n * p;\n\t\tif ( x === m ) {\n\t\t\tpval = 1;\n\t\t} else if ( x < m ) {\n\t\t\ty = 0;\n\t\t\tfor ( i = ceil( m ); i <= n; i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF(x, n, p) + ( 1 - binomialCDF(n - y, n, p ) );\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tfor ( i = 0; i <= floor( m ); i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF( y-1, n, p ) + ( 1 - binomialCDF( x-1, n, p ) );\n\t\t}\n\t\tcint = [ lower( x, n, alpha/2.0 ), upper( x, n, alpha/2.0 ) ];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'nullValue', p );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Exact binomial test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default binomialTest;\n"],"names":["validate","opts","options","isObject","hasOwnProp","alpha","isNumber","isnan","TypeError","format","alternative","isString","p","print","decision","dgts","str","arguments","length","isPositiveInteger","digits","isBoolean","this","method","nullValue","roundn","pValue","statistic","ci","rejected","lower","x","n","betaQuantile","upper","binomialTest","cint","pval","stat","alt","err","out","d","m","y","i","isNumberArray","Error","isNonNegativeInteger","RangeError","binomialCDF","binomialPMF","ceil","floor","join","setReadOnly"],"mappings":";;yqDA2CA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAUD,GAGXE,EAAYF,EAAS,WACzBD,EAAKI,MAAQH,EAAQG,OACfC,EAAUL,EAAKI,QAAWE,EAAON,EAAKI,QACpC,IAAIG,UAAWC,EAAQ,8DAA+D,QAASR,EAAKI,QAGxGD,EAAYF,EAAS,iBACzBD,EAAKS,YAAcR,EAAQQ,aACrBC,EAAUV,EAAKS,cACb,IAAIF,UAAWC,EAAQ,8DAA+D,cAAeR,EAAKS,cAG9GN,EAAYF,EAAS,OACzBD,EAAKW,EAAIV,EAAQU,GACXN,EAAUL,EAAKW,IAAOL,EAAON,EAAKW,IAChC,IAAIJ,UAAWC,EAAQ,8DAA+D,IAAKR,EAAKW,IAGlG,KApBC,IAAIJ,UAAWC,EAAQ,qEAAsEP,GAqBtG,CCxBA,SAASW,EAAOZ,GAEf,IAAIa,EACAC,EACAC,EAIJ,GAFAD,EAAO,EACPD,GAAW,EACNG,UAAUC,OAAS,EAAI,CAC3B,IAAMf,EAAUF,GACf,MAAM,IAAIO,UAAWC,EAAQ,mEAAoER,IAElG,GAAKG,EAAYH,EAAM,UAAa,CACnC,IAAMkB,EAAmBlB,EAAKmB,QAC7B,MAAM,IAAIZ,UAAWC,EAAQ,wEAAyE,SAAUR,EAAKmB,SAEtHL,EAAOd,EAAKmB,MACZ,CACD,GAAKhB,EAAYH,EAAM,YAAe,CACrC,IAAMoB,EAAWpB,EAAKa,UACrB,MAAM,IAAIN,UAAWC,EAAQ,+DAAgE,WAAYR,EAAKa,WAE/GA,EAAWb,EAAKa,QAChB,CACD,CAMD,OALAE,EAAM,GACNA,GAAOM,KAAKC,OACZP,GAAO,OACPA,GAAO,2BACPA,GAAO,mCACEM,KAAKZ,aACd,IAAK,OACJM,GAAO,aACP,MACD,IAAK,UACJA,GAAO,gBACP,MAED,QACCA,GAAO,gBAsBR,OAnBAA,GAAOM,KAAKE,UACZR,GAAO,OACPA,GAAO,eAAiBS,EAAQH,KAAKI,QAASX,GAAS,KACvDC,GAAO,kBAAoBS,EAAQH,KAAKK,WAAYZ,GAAS,KAC7DC,GAAO,OAA2B,KAAhB,EAAIM,KAAKjB,OAAc,2BACxCoB,EAAQH,KAAKM,GAAG,IAAKb,GACrB,IACAU,EAAQH,KAAKM,GAAG,IAAKb,GACtB,IACAC,GAAO,OACFF,IACJE,GAAO,kBACFM,KAAKO,SACTb,GAAO,0CAAwD,IAAXM,KAAKjB,MAAa,uBAEtEW,GAAO,kDAAgE,IAAXM,KAAKjB,MAAa,uBAE/EW,GAAO,MAEDA,CACR,CCrDA,SAASc,EAAOC,EAAGC,EAAG3B,GACrB,OAAe,IAAN0B,EAAY,EAAIE,EAAc5B,EAAO0B,EAAGC,EAAID,EAAI,EAC1D,CAWA,SAASG,EAAOH,EAAGC,EAAG3B,GACrB,OAAS0B,IAAMC,EAAM,EAAIC,EAAc,EAAI5B,EAAO0B,EAAI,EAAGC,EAAID,EAC9D,CAqBA,SAASI,IACR,IAAI9B,EACAJ,EACAmC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAX,EACApB,EACAmB,EACAa,EACAC,EAGJ,GADA5C,EAAO,CAAA,EACF6C,EAAe7B,UAAW,IAAQ,CAEtC,GAAkB,KADlBc,EAAId,UAAW,IACRC,OACN,MAAM,IAAI6B,MAAOtC,EAAQ,8EAA+EsB,IAEzGC,EAAID,EAAG,GAAMA,EAAG,GAChBA,EAAIA,EAAG,GACFd,UAAW,KACfuB,EAAMxC,EAAUC,EAAMgB,UAAW,IAEpC,KAAQ,CAGN,GADAe,EAAIf,UAAW,IACT+B,EAFNjB,EAAId,UAAW,IAGd,MAAM,IAAIT,UAAWC,EAAQ,4FAA6FsB,IAE3H,IAAMiB,EAAsBhB,GAC3B,MAAM,IAAIxB,UAAWC,EAAQ,qEAAsEuB,IAEpG,GAAKD,EAAIC,EACR,MAAM,IAAIxB,UAAWC,EAAQ,qHAEzBQ,UAAW,KACfuB,EAAMxC,EAAUC,EAAMgB,UAAW,IAElC,CACD,GAAKuB,EACJ,MAAMA,EAQP,IAJCnC,OADmB,IAAfJ,EAAKI,MACD,IAEAJ,EAAKI,OAED,GAAOA,EAAQ,EAC3B,MAAM,IAAI4C,WAAYxC,EAAQ,sFAAuF,QAASJ,IAO/H,IAJCO,OADe,IAAXX,EAAKW,EACL,GAEAX,EAAKW,GAED,GAAOA,EAAI,EACnB,MAAM,IAAIqC,WAAYxC,EAAQ,mEAAoE,IAAKG,IAKxG,OADA0B,EAAOP,EAAIC,EADXO,EAAMtC,EAAKS,aAAe,aAG1B,IAAK,OACJ2B,EAAOa,EAAanB,EAAGC,EAAGpB,GAC1BwB,EAAO,CAAE,EAAKF,EAAOH,EAAGC,EAAG3B,IAC3B,MACD,IAAK,UACJgC,EAAO,EAAMa,EAAanB,EAAI,EAAGC,EAAGpB,GACpCwB,EAAO,CAAEN,EAAOC,EAAGC,EAAG3B,GAAS,GAC/B,MACD,IAAK,YAGJ,GAFAqC,EAAIS,EAAapB,EAAGC,EAAGpB,GAElBmB,KADLY,EAAIX,EAAIpB,GAEPyB,EAAO,OACD,GAAKN,EAAIY,EAAI,CAEnB,IADAC,EAAI,EACEC,EAAIO,EAAMT,GAAKE,GAAKb,EAAGa,IACvBM,EAAaN,EAAGb,EAAGpB,IAtIP,UAsIc8B,IAC9BE,GAAK,GAGPP,EAAOa,EAAYnB,EAAGC,EAAGpB,IAAO,EAAIsC,EAAYlB,EAAIY,EAAGZ,EAAGpB,GAC7D,KAAS,CAEN,IADAgC,EAAI,EACEC,EAAI,EAAGA,GAAKQ,EAAOV,GAAKE,IACxBM,EAAaN,EAAGb,EAAGpB,IA9IP,UA8Ic8B,IAC9BE,GAAK,GAGPP,EAAOa,EAAaN,EAAE,EAAGZ,EAAGpB,IAAQ,EAAIsC,EAAanB,EAAE,EAAGC,EAAGpB,GAC7D,CACDwB,EAAO,CAAEN,EAAOC,EAAGC,EAAG3B,EAAM,GAAO6B,EAAOH,EAAGC,EAAG3B,EAAM,IACtD,MACD,QACC,MAAM,IAAI0C,MAAOtC,EAAQ,gFAAiF,cAAe,CAAE,YAAa,OAAQ,WAAY6C,KAAM,QAAUf,IAa7K,OATAgB,EADAd,EAAM,CAAA,EACY,WAAYJ,GAAQhC,GACtCkD,EAAad,EAAK,QAASpC,GAC3BkD,EAAad,EAAK,SAAUJ,GAC5BkB,EAAad,EAAK,YAAaH,GAC/BiB,EAAad,EAAK,KAAML,GACxBmB,EAAad,EAAK,YAAa7B,GAC/B2C,EAAad,EAAK,cAAeF,GACjCgB,EAAad,EAAK,SAAU,uBAC5Bc,EAAad,EAAK,QAAS5B,GACpB4B,CACR"}