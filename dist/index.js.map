{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/print.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.p] - probability under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'p' ) ) {\n\t\topts.p = options.p;\n\t\tif ( !isNumber( opts.p ) || isnan( opts.p ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'p', opts.p ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar isNumberArray = require( '@stdlib/assert-is-number-array' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar betaQuantile = require( '@stdlib/stats-base-dists-beta-quantile' );\nvar floor = require( '@stdlib/math-base-special-floor' );\nvar ceil = require( '@stdlib/math-base-special-ceil' );\nvar binomialCDF = require( '@stdlib/stats-base-dists-binomial-cdf' );\nvar binomialPMF = require( '@stdlib/stats-base-dists-binomial-pmf' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar RELATIVE_ERROR = 1+1e-07;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the lower endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} lower endpoint\n*/\nfunction lower( x, n, alpha ) {\n\treturn ( x === 0 ) ? 0 : betaQuantile( alpha, x, n - x + 1 );\n}\n\n/**\n* Calculates the upper endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} upper endpoint\n*/\nfunction upper( x, n, alpha ) {\n\treturn ( x === n ) ? 1 : betaQuantile( 1 - alpha, x + 1, n - x );\n}\n\n\n// MAIN //\n\n/**\n* Computes an exact test for the success probability in a Bernoulli experiment.\n*\n* @param {(NonNegativeInteger|Array)} x - number of successes or two-element array with successes and failures\n* @param {NonNegativeInteger} [n] - total number of observations\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {Probability} [options.p=0.5] - success probability under H0\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @returns {Object} test results\n*/\nfunction binomialTest() {\n\tvar alpha;\n\tvar opts;\n\tvar cint;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar d;\n\tvar m;\n\tvar n;\n\tvar p;\n\tvar x;\n\tvar y;\n\tvar i;\n\n\topts = {};\n\tif ( isNumberArray( arguments[ 0 ] ) ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== 2 ) {\n\t\t\tthrow new Error( format( 'invalid argument. An array argument must contain two elements. Value: `%s`.', x ) );\n\t\t}\n\t\tn = x[ 1 ] + x[ 0 ];\n\t\tx = x[ 0 ];\n\t\tif ( arguments[ 1 ] ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t}\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\tn = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer or a two-element array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', n ) );\n\t\t}\n\t\tif ( x > n ) {\n\t\t\tthrow new TypeError( format( 'invalid arguments. Number of successes cannot be larger than the total number of observations. x: `%u`. n: `%u`.' ) );\n\t\t}\n\t\tif ( arguments[ 2 ] ) {\n\t\t\terr = validate( opts, arguments[ 2 ] );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%f`.', 'alpha', alpha ) );\n\t}\n\tif ( opts.p === void 0 ) {\n\t\tp = 0.5;\n\t} else {\n\t\tp = opts.p;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` option must be a probability. Option: `%f`.', 'p', p ) );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tstat = x / n;\n\tswitch ( alt ) {\n\tcase 'less':\n\t\tpval = binomialCDF( x, n, p );\n\t\tcint = [ 0.0, upper( x, n, alpha ) ];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - binomialCDF( x - 1, n, p );\n\t\tcint = [ lower( x, n, alpha ), 1.0 ];\n\t\tbreak;\n\tcase 'two-sided':\n\t\td = binomialPMF( x, n, p );\n\t\tm = n * p;\n\t\tif ( x === m ) {\n\t\t\tpval = 1;\n\t\t} else if ( x < m ) {\n\t\t\ty = 0;\n\t\t\tfor ( i = ceil( m ); i <= n; i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF(x, n, p) + ( 1 - binomialCDF(n - y, n, p ) );\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tfor ( i = 0; i <= floor( m ); i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF( y-1, n, p ) + ( 1 - binomialCDF( x-1, n, p ) );\n\t\t}\n\t\tcint = [ lower( x, n, alpha/2.0 ), upper( x, n, alpha/2.0 ) ];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', [ 'two-sided', 'less', 'greater' ].join( '\", \"' ), alt ) );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'nullValue', p );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Exact binomial test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = binomialTest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exact test for the success probability in a Bernoulli experiment.\n*\n* @module @stdlib/stats-binomial-test\n*\n* @example\n* var binomialTest = require( '@stdlib/stats-binomial-test' );\n*\n* var out = binomialTest( 682, 925 );\n* // returns {...}\n*\n* out = binomialTest( 682, 925, {\n*     'p': 0.75,\n*     'alpha': 0.05\n* });\n* // returns {...}\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isNumber", "isObject", "isString", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "isNumberArray", "isNonNegativeInteger", "betaQuantile", "floor", "ceil", "binomialCDF", "binomialPMF", "format", "validate", "print", "RELATIVE_ERROR", "lower", "x", "n", "alpha", "upper", "binomialTest", "opts", "cint", "pval", "stat", "alt", "err", "out", "d", "m", "p", "y", "i", "main"]
}
